from utils import positive_int_check, float_check
from methods import *
from math import sqrt, sin

# –í–∞—Ä–∏–∞–Ω—Ç 3
# [ùëé, ùëè] = [0, 1], ùëì(ùë•) = sin(ùë•), ùúå(ùë•) = 1 / sqrt(x)

function_string = "sin(x)"
weight_function_string = "1 / sqrt(x)"

def function(x):
    return sin(x)

def weight_function(x):
    return 1 / sqrt(x)

print("\n–ü—Ä–∏–±–ª–∏–∂—ë–Ω–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞–ª–æ–≤ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–æ–Ω–Ω—ã—Ö –∫–≤–∞–¥—Ä–∞—Ç—É—Ä–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª\n")

print(f"–ù–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ 3. –ü–æ–¥—ã–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - {function_string} * {weight_function_string}\n")
down_border = float_check("–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∂–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è => ")
up_border = float_check("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä—Ö–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è => ")

print(f'\n"–¢–æ—á–Ω–æ–µ" –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞–ª–∞ –ø–æ –æ—Ç—Ä–µ–∑–∫—É [{down_border}, {up_border}]',
      f'–¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ ({function_string}) * ({weight_function_string}) = {get_value_of_integral(down_border, up_border)}')

count_of_points = positive_int_check("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤ => ")
print("–í–≤–æ–¥–∏—Ç–µ –ø–æ–ø–∞—Ä–Ω–æ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —É–∑–ª—ã: ")
list_of_points = []

for i in range(count_of_points):
    point = float_check(f'"x{i+1}" = ')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π —É–∑–µ–ª —É–∂–µ
    while point in list_of_points:
        print("–¢–∞–∫–æ–π —É–∑–µ–ª —É–∂–µ –µ—Å—Ç—å, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥!")
        point = float_check(f'"x{i+1}" = ')

    list_of_points.append(point)

list_of_values = [function(x) for x in list_of_points]

coefficients = get_list_of_coefficients(down_border, up_border, list_of_points)

print("\n–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ò–ö–§: ")
for i in range(count_of_points):
    print(f"\t–î–ª—è —Ç–æ—á–∫–∏ - {list_of_points[i]} –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç - {coefficients[i]}")

print(f"\n–ü—Ä–æ–≤–µ–¥–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–æ—á–Ω–æ—Å—Ç–∏ –ò–ö–§ –Ω–∞ –º–Ω–æ–≥–æ—á–ª–µ–Ω–µ {count_of_points - 1} —Å—Ç–µ–ø–µ–Ω–∏: ")

# –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞
polynomial_string = " + ".join([f"{i+1}*x^{i}" for i in range(len(list_of_points)-1, 0, -1)]) + " + 1"
print(polynomial_string)

interpolation_integral, accurate_integral = check_quadrature_formula(
    len(list_of_points) - 1, coefficients, list_of_points, down_border, up_border
)

print(f'\n"–¢–æ—á–Ω–æ–µ" –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞–ª–∞ –æ—Ç –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞ - {accurate_integral}\n'
      f'–ü—Ä–∏–±–ª–∏–∂–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - {interpolation_integral}\n'
      f'–ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å - {abs(accurate_integral - interpolation_integral)}')

quadrature_value = get_value_of_quadrature_formula(coefficients, list_of_values)

print(f'\n"–¢–æ—á–Ω–æ–µ" –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞–ª–∞ - {get_value_of_integral(down_border, up_border)}')
print(f'–ó–Ω–∞—á–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞–ª–∞, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å –ø–æ–º–æ—â—å—é –ò–ö–§ - {quadrature_value}')
print(f'–ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è - {abs(get_value_of_integral(down_border, up_border) - quadrature_value)}')
